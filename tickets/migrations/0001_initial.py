# Generated by Django 4.2.4 on 2024-02-02 19:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('stages', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tags', '0001_initial'),
        ('segments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('upvotes', models.IntegerField(default=0)),
                ('downvotes', models.IntegerField(default=0)),
                ('accepted_solution', models.BooleanField(default=False)),
                ('deleted', models.CharField(choices=[('1', 'This post was deleted by user.'), ('2', 'This post was not deleted by user.')], default='2', max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_created_by', to=settings.AUTH_USER_MODEL)),
                ('parent_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='tickets.post')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('estimated_end_date', models.DateField()),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('1', 'Active tickets represent tickets or issues that are currently being worked on, are in progress, or are actively being addressed by team members.'), ('2', 'Inactive tickets represent tickets or issues that are not currently being worked on, have been completed, or have been put on hold for various reasons like, a ticket has been postponed, deprioritized, or is awaiting further action.'), ('3', 'When candidate finishes the task, he can move the ticket to a Finished stage. Completed tickets are the one which was marked as Completed by Any Assigner.'), ('4', 'When this task or ticket is suddenly not required future or not important or need to do later based on another requirement, On Hold tickets are the one which was marked as On Hold by Any Assigner.')], default='1', max_length=1)),
                ('priority_type', models.CharField(choices=[('1', 'Text Option allows to select priority using High, Medium and Low for a ticket.'), ('2', 'Scale Option allows to select priority using 1 to 10 for a ticket.')], default='1', max_length=1)),
                ('priority', models.CharField(choices=[('1', "This level is used for tasks or issues that require immediate attention or have a significant impact on the project, business, or customer satisfaction. High-priority items are typically those that need to be resolved or addressed as soon as possible. It's 'good' to use this level for critical issues that genuinely require urgent action."), ('2', "Medium-priority items are important but not as urgent as high-priority tasks. They might have a significant impact if not addressed promptly but don't require immediate attention. These are often used for tasks or issues that need to be addressed in the near future but can wait for a short period. It's 'good' to use this level for important tasks that need to be scheduled and managed carefully."), ('3', "Low-priority items are not time-sensitive and can be addressed at a later date without significant negative consequences. These are often used for tasks or issues that are nice-to-have but not critical for the current phase of a project or operation. It's 'good' to use this level for non-urgent, lower-impact items that can be deprioritized when higher-priority tasks emerge.")], default='2', max_length=1)),
                ('priority_scale', models.CharField(choices=[('10', 'High'), ('09', 'High'), ('08', 'High'), ('07', 'High'), ('06', 'MEDIUM'), ('05', 'MEDIUM'), ('04', 'MEDIUM'), ('03', 'LOW'), ('02', 'LOW'), ('01', 'LOW')], default='01', max_length=2)),
                ('ticket_type', models.CharField(choices=[('01', 'A Bug is a flaw or error in a computer program that causes it to behave in an unintended or unexpected way. A bug has to be resolved.'), ('02', 'A Feature is a new block that has to be implemented based on a idea.'), ('03', 'If you want to add more or update something, Enhancement is the one to choose.'), ('04', "If you're using Agile methodologies like Scrum, you might use this to describe user requirements. User stories focus on delivering value to the end-user."), ('05', 'This category can be used to track tasks related to code refactoring, code quality improvements, and addressing technical issues that may not be visible to end-users but need attention. Make sure to add all the necessary sub tickets and super tickets.'), ('06', 'Tasks related to creating or updating documentation, including user manuals, API documentation, or internal documentation.'), ('07', 'For tasks that involve investigating new technologies, evaluating potential solutions, or conducting market research.'), ('08', 'Tasks related to deploying code to production, configuring servers, or managing deployment pipelines.'), ('09', 'Tasks related to quality assurance and testing efforts, including test case creation, test execution, and bug verification.'), ('10', 'If your project involves ongoing support for end-users, you can use this category to track support requests and issues.'), ('11', 'Tasks related to identifying and addressing security vulnerabilities or implementing security features.'), ('12', 'For tasks related to server maintenance, cloud infrastructure management, or network configuration.'), ('13', 'If your project must adhere to specific regulations or compliance standards, you can use this category to track tasks related to compliance efforts.'), ('14', 'Tasks related to data management, data migration, or database schema changes.'), ('15', 'Tasks focused on optimizing system performance, including profiling, benchmarking, and optimization efforts.'), ('16', 'Tasks related to improving the overall user experience, including user interface design and usability testing.'), ('17', 'If your project is available in multiple languages, you can use this category for tasks related to translation and localization.'), ('18', 'Tasks related to training team members or end-users on how to use the software or tools effectively.')], default='02', max_length=2)),
                ('deleted', models.CharField(choices=[('1', 'This ticket was deleted by user.'), ('2', 'This tickect was not deleted by user.')], default='2', max_length=1)),
                ('company_ticket_counter', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.IntegerField(choices=[(1, 'Upvote'), (-1, 'Downvote')])),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.post')),
                ('voted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_voted_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stages.stage')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='TicketAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_assignment_given_by', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_assignment_received_to', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_assignment_created_by', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.ticket')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_assignment_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='assigned_by',
            field=models.ManyToManyField(blank=True, related_name='ticket_assigned_by', through='tickets.TicketAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticket',
            name='assigned_to',
            field=models.ManyToManyField(blank=True, related_name='ticket_assigned_to', through='tickets.TicketAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticket',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_created_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticket',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='ticket_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticket',
            name='segment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_segment', to='segments.segment'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='stages',
            field=models.ManyToManyField(through='tickets.TicketStage', to='stages.stage'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='sub_tickets',
            field=models.ManyToManyField(blank=True, related_name='tickets_sub_tickets', to='tickets.ticket'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='super_tickets',
            field=models.ManyToManyField(blank=True, related_name='tickets_super_tickets', to='tickets.ticket'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='ticket_tags', to='tags.tag'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='updated_by',
            field=models.ManyToManyField(blank=True, related_name='ticket_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SavedPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved', models.CharField(choices=[('1', 'This post was saved by user.'), ('2', 'This post was not saved by user.')], default='1', max_length=1)),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='saved_posts', to='tickets.post')),
                ('saved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_saved_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_ticket', to='tickets.ticket'),
        ),
        migrations.CreateModel(
            name='PinnedPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved', models.CharField(choices=[('1', 'This post was pinned by user.'), ('2', 'This post was not pinned by user.')], default='1', max_length=1)),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_pinned_by', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_posts', to='tickets.post')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalTicketAssignment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(blank=True, editable=False)),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tickets.ticket')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ticket assignment',
                'verbose_name_plural': 'historical ticket assignments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTicket',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('estimated_end_date', models.DateField()),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('1', 'Active tickets represent tickets or issues that are currently being worked on, are in progress, or are actively being addressed by team members.'), ('2', 'Inactive tickets represent tickets or issues that are not currently being worked on, have been completed, or have been put on hold for various reasons like, a ticket has been postponed, deprioritized, or is awaiting further action.'), ('3', 'When candidate finishes the task, he can move the ticket to a Finished stage. Completed tickets are the one which was marked as Completed by Any Assigner.'), ('4', 'When this task or ticket is suddenly not required future or not important or need to do later based on another requirement, On Hold tickets are the one which was marked as On Hold by Any Assigner.')], default='1', max_length=1)),
                ('priority_type', models.CharField(choices=[('1', 'Text Option allows to select priority using High, Medium and Low for a ticket.'), ('2', 'Scale Option allows to select priority using 1 to 10 for a ticket.')], default='1', max_length=1)),
                ('priority', models.CharField(choices=[('1', "This level is used for tasks or issues that require immediate attention or have a significant impact on the project, business, or customer satisfaction. High-priority items are typically those that need to be resolved or addressed as soon as possible. It's 'good' to use this level for critical issues that genuinely require urgent action."), ('2', "Medium-priority items are important but not as urgent as high-priority tasks. They might have a significant impact if not addressed promptly but don't require immediate attention. These are often used for tasks or issues that need to be addressed in the near future but can wait for a short period. It's 'good' to use this level for important tasks that need to be scheduled and managed carefully."), ('3', "Low-priority items are not time-sensitive and can be addressed at a later date without significant negative consequences. These are often used for tasks or issues that are nice-to-have but not critical for the current phase of a project or operation. It's 'good' to use this level for non-urgent, lower-impact items that can be deprioritized when higher-priority tasks emerge.")], default='2', max_length=1)),
                ('priority_scale', models.CharField(choices=[('10', 'High'), ('09', 'High'), ('08', 'High'), ('07', 'High'), ('06', 'MEDIUM'), ('05', 'MEDIUM'), ('04', 'MEDIUM'), ('03', 'LOW'), ('02', 'LOW'), ('01', 'LOW')], default='01', max_length=2)),
                ('ticket_type', models.CharField(choices=[('01', 'A Bug is a flaw or error in a computer program that causes it to behave in an unintended or unexpected way. A bug has to be resolved.'), ('02', 'A Feature is a new block that has to be implemented based on a idea.'), ('03', 'If you want to add more or update something, Enhancement is the one to choose.'), ('04', "If you're using Agile methodologies like Scrum, you might use this to describe user requirements. User stories focus on delivering value to the end-user."), ('05', 'This category can be used to track tasks related to code refactoring, code quality improvements, and addressing technical issues that may not be visible to end-users but need attention. Make sure to add all the necessary sub tickets and super tickets.'), ('06', 'Tasks related to creating or updating documentation, including user manuals, API documentation, or internal documentation.'), ('07', 'For tasks that involve investigating new technologies, evaluating potential solutions, or conducting market research.'), ('08', 'Tasks related to deploying code to production, configuring servers, or managing deployment pipelines.'), ('09', 'Tasks related to quality assurance and testing efforts, including test case creation, test execution, and bug verification.'), ('10', 'If your project involves ongoing support for end-users, you can use this category to track support requests and issues.'), ('11', 'Tasks related to identifying and addressing security vulnerabilities or implementing security features.'), ('12', 'For tasks related to server maintenance, cloud infrastructure management, or network configuration.'), ('13', 'If your project must adhere to specific regulations or compliance standards, you can use this category to track tasks related to compliance efforts.'), ('14', 'Tasks related to data management, data migration, or database schema changes.'), ('15', 'Tasks focused on optimizing system performance, including profiling, benchmarking, and optimization efforts.'), ('16', 'Tasks related to improving the overall user experience, including user interface design and usability testing.'), ('17', 'If your project is available in multiple languages, you can use this category for tasks related to translation and localization.'), ('18', 'Tasks related to training team members or end-users on how to use the software or tools effectively.')], default='02', max_length=2)),
                ('deleted', models.CharField(choices=[('1', 'This ticket was deleted by user.'), ('2', 'This tickect was not deleted by user.')], default='2', max_length=1)),
                ('company_ticket_counter', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('segment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='segments.segment')),
            ],
            options={
                'verbose_name': 'historical ticket',
                'verbose_name_plural': 'historical tickets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPost',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('content', models.TextField()),
                ('upvotes', models.IntegerField(default=0)),
                ('downvotes', models.IntegerField(default=0)),
                ('accepted_solution', models.BooleanField(default=False)),
                ('deleted', models.CharField(choices=[('1', 'This post was deleted by user.'), ('2', 'This post was not deleted by user.')], default='2', max_length=1)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_post', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tickets.post')),
                ('ticket', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tickets.ticket')),
            ],
            options={
                'verbose_name': 'historical post',
                'verbose_name_plural': 'historical posts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
